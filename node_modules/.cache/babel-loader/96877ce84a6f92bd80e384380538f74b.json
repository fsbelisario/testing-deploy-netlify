{"ast":null,"code":"const BASE_URL = 'https://desafio-m03.herokuapp.com/';\n\nasync function post(resource, data, token) {\n  const headers = {\n    'Content-type': 'application/json'\n  };\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  const resposta = await fetch(BASE_URL + resource, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers\n  });\n  const dados = await resposta.json();\n  return {\n    dados,\n    erro: !resposta.ok\n  };\n}\n\nasync function put(resource, data, token) {\n  const headers = {\n    'Content-type': 'application/json'\n  };\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  const resposta = await fetch(BASE_URL + resource, {\n    method: 'PUT',\n    body: JSON.stringify(data),\n    headers\n  });\n  const dados = await resposta.json();\n  return {\n    dados,\n    erro: !resposta.ok\n  };\n}\n\nasync function get(resource, token) {\n  const headers = {};\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  const resposta = await fetch(BASE_URL + resource, {\n    headers\n  });\n  const dados = await resposta.json();\n  return {\n    dados,\n    erro: !resposta.ok\n  };\n}\n\nasync function del(resource, token) {\n  const headers = {};\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  const resposta = await fetch(BASE_URL + resource, {\n    method: 'DELETE',\n    headers\n  });\n  const dados = await resposta.json();\n  return {\n    dados,\n    erro: !resposta.ok\n  };\n}\n\nexport { put, post, get, del };","map":{"version":3,"sources":["C:/Users/felip/Desktop/Projetos/Programação/Cubos Academy/2021.08.24 - Front-end/testing-deploy-netlify/src/services/ApiClient.js"],"names":["BASE_URL","post","resource","data","token","headers","resposta","fetch","method","body","JSON","stringify","dados","json","erro","ok","put","get","del"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,oCAAjB;;AAEA,eAAeC,IAAf,CAAoBC,QAApB,EAA8BC,IAA9B,EAAoCC,KAApC,EAA2C;AACzC,QAAMC,OAAO,GAAG;AACd,oBAAgB;AADF,GAAhB;;AAIA,MAAID,KAAJ,EAAW;AACTC,IAAAA,OAAO,CAAC,eAAD,CAAP,GAA4B,UAASD,KAAM,EAA3C;AACD;;AAED,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAQ,GAACE,QAAV,EAAoB;AAC9CM,IAAAA,MAAM,EAAE,MADsC;AAE9CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAFwC;AAG9CE,IAAAA;AAH8C,GAApB,CAA5B;AAMA,QAAMO,KAAK,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAApB;AAEA,SAAO;AAAED,IAAAA,KAAF;AAASE,IAAAA,IAAI,EAAE,CAACR,QAAQ,CAACS;AAAzB,GAAP;AACD;;AAED,eAAeC,GAAf,CAAmBd,QAAnB,EAA6BC,IAA7B,EAAmCC,KAAnC,EAA0C;AACxC,QAAMC,OAAO,GAAG;AACd,oBAAgB;AADF,GAAhB;;AAIA,MAAID,KAAJ,EAAW;AACTC,IAAAA,OAAO,CAAC,eAAD,CAAP,GAA4B,UAASD,KAAM,EAA3C;AACD;;AAED,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAQ,GAACE,QAAV,EAAoB;AAC9CM,IAAAA,MAAM,EAAE,KADsC;AAE9CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAFwC;AAG9CE,IAAAA;AAH8C,GAApB,CAA5B;AAMA,QAAMO,KAAK,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAApB;AAEA,SAAO;AAAED,IAAAA,KAAF;AAASE,IAAAA,IAAI,EAAE,CAACR,QAAQ,CAACS;AAAzB,GAAP;AACD;;AAED,eAAeE,GAAf,CAAmBf,QAAnB,EAA6BE,KAA7B,EAAoC;AAClC,QAAMC,OAAO,GAAG,EAAhB;;AAEA,MAAID,KAAJ,EAAW;AACTC,IAAAA,OAAO,CAAC,eAAD,CAAP,GAA4B,UAASD,KAAM,EAA3C;AACD;;AAED,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAQ,GAACE,QAAV,EAAoB;AAC9CG,IAAAA;AAD8C,GAApB,CAA5B;AAIA,QAAMO,KAAK,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAApB;AAEA,SAAO;AAAED,IAAAA,KAAF;AAASE,IAAAA,IAAI,EAAE,CAACR,QAAQ,CAACS;AAAzB,GAAP;AACD;;AAED,eAAeG,GAAf,CAAmBhB,QAAnB,EAA6BE,KAA7B,EAAoC;AAClC,QAAMC,OAAO,GAAG,EAAhB;;AAEA,MAAID,KAAJ,EAAW;AACTC,IAAAA,OAAO,CAAC,eAAD,CAAP,GAA4B,UAASD,KAAM,EAA3C;AACD;;AAED,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAQ,GAACE,QAAV,EAAoB;AAC9CM,IAAAA,MAAM,EAAE,QADsC;AAE9CH,IAAAA;AAF8C,GAApB,CAA5B;AAKA,QAAMO,KAAK,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAApB;AAEA,SAAO;AAAED,IAAAA,KAAF;AAASE,IAAAA,IAAI,EAAE,CAACR,QAAQ,CAACS;AAAzB,GAAP;AACD;;AAED,SAASC,GAAT,EAAcf,IAAd,EAAoBgB,GAApB,EAAyBC,GAAzB","sourcesContent":["const BASE_URL = 'https://desafio-m03.herokuapp.com/';\r\n\r\nasync function post(resource, data, token) {\r\n  const headers = {\r\n    'Content-type': 'application/json'\r\n  };\r\n\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`; \r\n  }\r\n\r\n  const resposta = await fetch(BASE_URL+resource, {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n    headers,\r\n  });\r\n\r\n  const dados = await resposta.json();\r\n\r\n  return { dados, erro: !resposta.ok }\r\n}\r\n\r\nasync function put(resource, data, token) {\r\n  const headers = {\r\n    'Content-type': 'application/json'\r\n  };\r\n\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`; \r\n  }\r\n\r\n  const resposta = await fetch(BASE_URL+resource, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(data),\r\n    headers,\r\n  });\r\n\r\n  const dados = await resposta.json();\r\n\r\n  return { dados, erro: !resposta.ok }\r\n}\r\n\r\nasync function get(resource, token) {\r\n  const headers = {};\r\n\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`; \r\n  }\r\n\r\n  const resposta = await fetch(BASE_URL+resource, {\r\n    headers,\r\n  });\r\n\r\n  const dados = await resposta.json();\r\n\r\n  return { dados, erro: !resposta.ok }\r\n}\r\n\r\nasync function del(resource, token) {\r\n  const headers = {};\r\n\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`; \r\n  }\r\n\r\n  const resposta = await fetch(BASE_URL+resource, {\r\n    method: 'DELETE',\r\n    headers,\r\n  });\r\n\r\n  const dados = await resposta.json();\r\n\r\n  return { dados, erro: !resposta.ok }\r\n}\r\n\r\nexport { put, post, get, del };"]},"metadata":{},"sourceType":"module"}